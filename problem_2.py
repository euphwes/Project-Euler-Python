"""
Even Fibonacci numbers
----------------------

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find
the sum of the even-valued terms.
"""

from utils.timer import timeit

#-------------------------------------------------------------------------------------------------

def fibonacci(max_value=None):
    """ Generator which yields the Fibonacci sequence, up to a maximum value. If the max_value
    is not supplied, the generator continues indefinitely. """

    a, b = 1, 2

    while True:
        yield a
        a, b = b, a+b
        if max_value and a >= max_value:
            return

#-------------------------------------------------------------------------------------------------

@timeit
def problem_2():
    is_even = lambda x: x % 2 == 0
    even_fib_sum = sum(filter(is_even, fibonacci(max_value=4000000)))
    print(even_fib_sum)

#-------------------------------------------------------------------------------------------------

if __name__ == '__main__':
    print()
    problem_2()
